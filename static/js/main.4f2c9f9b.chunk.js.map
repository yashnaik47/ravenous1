{"version":3,"sources":["Components/App/logo.svg","Components/Business/Business.js","Components/BusinessList/BusinessList.js","Components/SearchBar/SearchBar.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","business","Business","react_default","a","createElement","className","src","alt","React","Component","BusinessList","Components_Business_Business","sortByOptions","Best Match","Highest Rated","Most Reviewed","SearchBar","Object","keys","map","sortByOption","sortByOptionValue","key","this","renderSortByOptions","placeholder","App","Components_SearchBar_SearchBar","Components_BusinessList_BusinessList","Boolean","window","location","hostname","match","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yOCGlCC,eAEI,uBAFJA,EAGO,sBAHPA,EAII,aAJJA,EAKK,KALLA,EAMO,QANPA,EAOQ,UAPRA,EAQM,IARNA,EASW,GA4BFC,mLAvBP,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,gFAAgFC,IAAI,MAE7FL,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,SAAIJ,GACJE,EAAAC,EAAAC,cAAA,SAAIJ,GACJE,EAAAC,EAAAC,cAAA,SAAIJ,EAAJ,IAAqBA,IAEzBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUL,EAAxB,UACAE,EAAAC,EAAAC,cAAA,SAAIJ,EAAJ,sBAjBOQ,IAAMC,WCIdC,mLAbP,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAACO,EAAD,MACAT,EAAAC,EAAAC,cAACO,EAAD,MACAT,EAAAC,EAAAC,cAACO,EAAD,MACAT,EAAAC,EAAAC,cAACO,EAAD,MACAT,EAAAC,EAAAC,cAACO,EAAD,MACAT,EAAAC,EAAAC,cAACO,EAAD,cATWH,IAAMC,WCD3BG,SAAgB,CAClBC,aAAa,aACbC,gBAAgB,SAChBC,gBAAgB,iBA+BLC,gMA1BP,OAAOC,OAAOC,KAAKN,GAAeO,IAAI,SAAAC,GAClC,IAAIC,EAAoBT,EAAcQ,GACtC,OAAOlB,EAAAC,EAAAC,cAAA,MAAIkB,IAAKD,GAAoBD,sCAKxC,OACIlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,UACKmB,KAAKC,wBAGdtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,SAAOqB,YAAY,sBACnBvB,EAAAC,EAAAC,cAAA,SAAOqB,YAAY,YAEvBvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,8BArBII,IAAMC,WCOfiB,MAVf,WACE,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAACwB,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4f2c9f9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Business.css';\r\n\r\nconst business = { \r\n    imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\r\n    name: 'MarginOtto Pizzeria',\r\n    address: '1010 Paddington Way',\r\n    city: 'Flavortown',\r\n    state: 'NY',\r\n    zipCode: '10101',\r\n    category: 'Italian',\r\n    rating: 4.5,\r\n    reviewCount: 90\r\n};\r\n\r\nclass Business extends React.Component{\r\n    render(){\r\n        return (\r\n        <div className=\"Business\">\r\n            <div className=\"image-container\">\r\n            <img src='https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg' alt=''/>\r\n            </div>\r\n            <h2>{business.name}</h2>\r\n            <div className=\"Business-information\">\r\n            <div className=\"Business-address\">\r\n                <p>{business.address}</p>\r\n                <p>{business.city}</p>\r\n                <p>{business.state} {business.zipCode}</p>\r\n            </div>\r\n            <div className=\"Business-reviews\">\r\n                <h3>{business.category}</h3>\r\n                <h3 className=\"rating\">{business.rating} stars</h3>\r\n                <p>{business.reviewCount} reviews</p>\r\n            </div>\r\n            </div>\r\n      </div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"BusinessList\">\r\n                <Business/> \r\n                <Business/> \r\n                <Business/> \r\n                <Business/> \r\n                <Business/> \r\n                <Business/>     \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nconst sortByOptions = {\r\n    'Best Match':'best_match',\r\n    'Highest Rated':'rating',\r\n    'Most Reviewed':'review_count'\r\n};\r\n\r\nclass SearchBar extends React.Component{\r\n    renderSortByOptions(){\r\n        return Object.keys(sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = sortByOptions[sortByOption];\r\n            return <li key={sortByOptionValue}>{sortByOption}</li>\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                        {this.renderSortByOptions()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input placeholder=\"Search Businesses\" />\r\n                    <input placeholder=\"Where?\" />\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <a>Let's Go</a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>ravenous</h1>\n      <SearchBar/>\n      <BusinessList/> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}